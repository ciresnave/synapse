[package]
name = "synapse"
version = "1.1.0"
edition = "2024"
authors = ["Eric Evans <ciresnave@gmail.com>"]
description = "Neural Communication Network with Federated Identity and Blockchain Trust"
license = "MIT OR Apache-2.0"
repository = "https://github.com/ciresnave/synapse"
homepage = "https://github.com/ciresnave/synapse"
documentation = "https://docs.rs/synapse"
readme = "README.md"
keywords = ["neural", "communication", "ai", "federated", "blockchain"]
categories = ["network-programming", "web-programming", "cryptography", "science", "wasm"]
exclude = [
    "*.md",
    "docs/",
    "examples/README*.md",
    "target/",
    ".git/",
    ".vscode/",
    "*.bat",
    "*.sh"
]

[dependencies]
# Core dependencies - always included
async-trait = "0.1"
futures = "0.3"
serde = { version = "1.0", features = ["derive", "std"] }
serde_json = { version = "1.0", features = ["std"] }
proc-macro2 = "1.0"
quote = "1.0"
syn = { version = "2.0", features = ["full", "extra-traits"] }
tokio = { version = "1.46.1", features = ["macros", "rt-multi-thread", "net", "time", "sync", "fs", "io-util", "io-std", "signal"], optional = true }
dashmap = { version = "6.0", optional = true }
ahash = { version = "0.8", optional = true }
bincode = { version = "2.0.1", optional = true }
rand = { version = "0.9.1", optional = true }
auto-discovery = { version = "0.2", optional = true, features = ["mdns"] }

# Auth framework dependencies
uuid = { version = "1.6", features = ["v4", "serde"] }
chrono = { version = "0.4", features = ["serde", "clock"] }
anyhow = "1.0"
thiserror = "2.0"
tracing = { version = "0.1", features = ["std", "attributes"] }
url = "2.0"

# Cryptography
ring = { version = "0.17", optional = true }
rsa = { version = "0.9", optional = true }
aes-gcm = { version = "0.10", optional = true }
sha2 = { version = "0.10", optional = true }
ed25519-dalek = { version = "2.2.0", optional = true }
blake3 = { version = "1.5", optional = true }
base64 = { version = "0.22", optional = true }

# Configuration - optional
toml = { version = "0.9.2", optional = true }
tracing-subscriber = { version = "0.3", optional = true }
clap = { version = "4.5.41", features = ["derive"], optional = true }
config = { version = "0.15.13", optional = true }

# Networking - optional
reqwest = { version = "0.12.22", features = ["json"], optional = true }
tokio-tungstenite = { version = "0.27.0", optional = true }
tungstenite = { version = "0.27.0", optional = true }
futures-util = { version = "0.3", optional = true }

# System monitoring - optional
sysinfo = { version = "0.36.0", optional = true }
parking_lot = { version = "0.12", optional = true }

# Email protocols - optional
async-smtp = { version = "0.10", optional = true }
async-imap = { version = "0.10", optional = true }
lettre = { version = "0.11", optional = true }
mail-parser = { version = "0.11", optional = true }

# Database connections - optional
sqlx = { version = "0.8.6", features = ["runtime-tokio-rustls", "postgres", "uuid", "chrono", "json"], optional = true }
redis = { version = "0.32.4", features = ["tokio-comp"], optional = true }

# Authentication framework
auth-framework = { version = "0.3", optional = true, features = ["oauth-device-flows", "enhanced-device-flow"] }

# Network discovery - uses auto-discovery crate
socket2 = { version = "0.6.0", optional = true } # Used for other network operations

# WASM-specific dependencies
wasm-bindgen = { version = "0.2", optional = true }
wasm-bindgen-futures = { version = "0.4", optional = true }
web-sys = { version = "0.3", features = [
    "console", "Window", "WebSocket", "MessageEvent", "CloseEvent", 
    "ErrorEvent", "BinaryType", "BroadcastChannel"
], optional = true }
js-sys = { version = "0.3", optional = true }
getrandom = { version = "0.3.3", optional = true }
gloo-utils = { version = "0.2.0", optional = true }
gloo-storage = { version = "0.3.0", optional = true }
console_error_panic_hook = { version = "0.1", optional = true }
wasm-logger = { version = "0.2", optional = true }

# Development dependencies
[dev-dependencies]
tokio-test = "0.4"
pretty_assertions = "1.0"
tempfile = "3.0"
sqlx = { version = "0.8", features = ["runtime-tokio-rustls", "sqlite"] }

# WASM-specific dev dependencies  
[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test = "0.3"

[[bin]]
name = "synapse-router"
path = "src/bin/router.rs"
required-features = ["native"]

[[bin]]
name = "synapse-client"
path = "src/bin/client.rs"
required-features = ["native"]

[[bin]]
name = "synapse-demo"
path = "src/bin/synapse_demo.rs"
required-features = ["native"]

[[example]]
name = "hello_world"
path = "examples/hello_world.rs"
required-features = ["minimal"]

[[example]]
name = "working_basic_chat"
path = "examples/working_basic_chat.rs"
required-features = ["minimal"]

[[example]]
name = "simple_working_demo"
path = "examples/simple_working_demo.rs"
required-features = ["minimal"]

[[example]]
name = "basic_chat_fixed"
path = "examples/basic_chat_fixed.rs"
required-features = ["core"]

[[example]]
name = "connectivity_demo_fixed"
path = "examples/connectivity_demo_fixed.rs"
required-features = ["networking"]

[[example]]
name = "tool_interaction_fixed"
path = "examples/tool_interaction_fixed.rs"
required-features = ["core"]

[[example]]
name = "comprehensive_test"
path = "examples/comprehensive_test.rs"
required-features = ["core"]

[[example]]
name = "production_readiness_test"
path = "examples/production_readiness_test.rs"
required-features = ["core"]

[[example]]
name = "multi_transport_demo"
path = "examples/multi_transport_demo.rs"
required-features = ["networking"]

[[example]]
name = "circuit_breaker_demo"
path = "examples/circuit_breaker_demo.rs"
required-features = ["networking"]

[[example]]
name = "email_server_demo"
path = "examples/email_server_demo.rs"
required-features = ["email"]

[[example]]
name = "unified_transport_demo"
path = "examples/unified_transport_demo.rs"
required-features = ["networking"]

[[example]]
name = "http_transport_demo"
path = "examples/http_transport_demo.rs"
required-features = ["minimal", "http"]

[[example]]
name = "multi_transport_circuit_breaker_demo"
path = "examples/multi_transport_circuit_breaker_demo.rs"
required-features = ["minimal", "mdns", "networking"]

[features]
default = ["native"]

# Auth features
enhanced-auth = []

# Standard library support
std = []

# Minimal feature set for basic functionality
minimal = [
    "dep:tokio",
    "dep:bincode", 
    "dep:rand",
    "dep:dashmap",
    "telemetry",
    "dep:toml",
    "dep:config",
    "dep:base64",
    "dep:sha2"
]

# Core functionality (minimal dependencies)
core = [
    "minimal",
    "crypto",
    "dep:ahash",
    "dep:clap"
]

# Feature definitions for subsystems and implementations
crypto = [
    "dep:ring", 
    "dep:rsa", 
    "dep:aes-gcm", 
    "dep:sha2", 
    "dep:ed25519-dalek", 
    "dep:blake3", 
    "dep:base64"
]
http = ["dep:reqwest", "dep:tokio-tungstenite", "dep:tungstenite"]
mdns = ["dep:auto-discovery", "dep:socket2"] # Using auto-discovery crate now
auto_discovery = ["dep:auto-discovery", "mdns"]
cache = ["dep:redis"]
telemetry = ["dep:tracing-subscriber"]

# Networking feature (adds network transport capabilities)
networking = [
    "core",
    "http",
    "mdns",
    "dep:futures-util"
]

# Email feature (adds email server capabilities)
email = [
    "core",
    "dep:async-smtp",
    "dep:async-imap", 
    "dep:lettre",
    "dep:mail-parser"
]

# Database feature (adds database support)
database = [
    "core",
    "cache",
    "dep:sqlx"
]

# Authentication feature (adds federated authentication)
auth = [
    "core",
    "auth-framework"
]

# Full native platform support (the original working config but with updated deps)
native = [
    "core",
    "networking",
    "email",
    "database",
    "auth",
    "crypto",
    "http",
    "mdns",
    "cache",
    "telemetry",
    "dep:sysinfo",
    "dep:parking_lot"
]

# WASM feature for browser environments
wasm = [
    "dep:wasm-bindgen",
    "dep:wasm-bindgen-futures",
    "dep:web-sys",
    "dep:js-sys",
    "dep:gloo-utils",
    "dep:gloo-storage",
    "dep:console_error_panic_hook",
    "dep:wasm-logger",
    "dep:getrandom"
]

[lib]
crate-type = ["cdylib", "rlib"]

[package.metadata.wasm-pack.profile.release]
wee_alloc = false
